name: ${ zenv } - build and deploy

on:
  push:
    branches:
    - '${ deploy_branch }'
  workflow_dispatch:

env:
  REGION:  ${ region }
  SERVICE: ${ service_name }
  CLUSTER: ${ cluster_name }
  DOCKERFILE_PATH: ${ dockefile_path }

jobs:
  all-in-one:
    name: Build & Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: $${{ secrets.AWS_ECR_DEV_ACCESS_KEY }}
          aws-secret-access-key: $${{ secrets.AWS_ECR_DEV_SECRET_KEY }}
          aws-region: $${{ env.REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push Docker image
        env:
          ECR_REGISTRY_DEV: $${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build \
            --build-arg DATABASE_URL=$${{ secrets.DATABASE_URL }} \
            -t $ECR_REGISTRY_DEV/$CLUSTER:$SERVICE \
            -f $DOCKERFILE_PATH .
          docker push $ECR_REGISTRY_DEV/$CLUSTER:$SERVICE
      - name: ECS New Force Deployment
        run: |
          echo " --- [ Force New Deployment ] --- " 
          aws ecs update-service \
            --region=$REGION \
            --cluster=$CLUSTER \
            --force-new-deployment \
            --service=$CLUSTER-$SERVICE \
